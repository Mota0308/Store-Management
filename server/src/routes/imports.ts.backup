// 修復PDF解析函數 - 將去重機制改為數量累加機制
async function extractByPdfjs(buffer: Buffer): Promise<{ name: string; code: string; qty: number; purchaseType?: string; size?: string }[]> {
  const productMap = new Map<string, { name: string; code: string; qty: number; purchaseType?: string; size?: string }>(); // 用於累加相同產品的數量
  
  try {
    const data = await pdf(buffer);
    const text = data.text;
    
    if (text) {
      const lines = text.split(/\r?\n/).map((line: string) => line.trim()).filter(Boolean);
      
      for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        
        const wsCodeMatch = line.match(/(WS-\w+)/);
        if (wsCodeMatch) {
          let code = wsCodeMatch[1];
          
          // 添加調試日誌
          if (code === 'WS-793BU') {
            console.log(`調試: 第${i+1}次檢測到WS-793BU，行內容: "${line}"`);
          }
          
          // 跳過不完整的代碼
          if (code === "WS-712") {
            continue;
          }
          
          // 修復1HK後綴
          if (code.endsWith("1HK")) {
            code = code.replace("1HK", "");
          }
          
          // 改進的數量檢測 - 只在型號右邊查找
          let qty = 1;
          
          // 方法1：在型號後面的固定位置查找數量
          const codeIndex = line.indexOf(code);
          if (codeIndex !== -1) {
            const afterCode = line.substring(codeIndex + code.length);
            // 查找型號後面的數字，但排除規格中的數字（如3.5mm中的3）
            const qtyMatch = afterCode.match(/\s+(\d+)(?:\s|$)/);
            if (qtyMatch) {
              const extractedQty = parseInt(qtyMatch[1], 10);
              if (extractedQty >= 1 && extractedQty <= 99) {
                qty = extractedQty;
                if (code === 'WS-793BU') {
                  console.log(`調試: 在型號後找到數量 ${qty} - 型號: ${code}, 後續文本: "${afterCode}"`);
                }
              }
            }
          }
          
          // 方法2：如果同一行沒找到，在後續行的固定位置查找
          if (qty === 1) {
            for (let j = i + 1; j < Math.min(i + 5, lines.length); j++) {
              const nextLine = lines[j];
              // 只匹配純數字行，避免包含其他文字的規格行
              const qtyInNextLine = nextLine.match(/^\s*([1-9]\d{0,2})\s*$/);
              if (qtyInNextLine) {
                const extractedQty = parseInt(qtyInNextLine[1], 10);
                if (extractedQty >= 1 && extractedQty <= 99) {
                  qty = extractedQty;
                  if (code === 'WS-793BU') {
                    console.log(`調試: 在後續行找到數量 ${qty} - 行內容: "${nextLine}"`);
                  }
                  break;
                }
              }
            }
          }
          
          // 查找尺寸和購買類型 - 根據產品類型決定提取策略
          let size: string | undefined;
          let purchaseType: string | undefined;
          
          for (let j = i + 1; j < Math.min(i + 10, lines.length); j++) {
            const nextLine = lines[j];
            
            // 根據產品類型決定提取策略
            if (code.includes("WS-712")) {
              // WS-712系列：提取尺寸和購買類型
              const extracted = extractPurchaseTypeAndSize(nextLine);
              if (extracted.size) {
                size = extracted.size;
              }
              if (extracted.purchaseType) {
                purchaseType = extracted.purchaseType;
              }
            } else {
              // 其他產品：只提取尺寸，不提取購買類型
              const extracted = extractPurchaseTypeAndSize(nextLine);
              if (extracted.size) {
                size = extracted.size;
              }
              // 不提取購買類型，保持為 undefined
            }
            
            // 如果遇到下一個商品代碼，停止搜索
            if (nextLine.match(/(WS-\w+)/)) {
              break;
            }
          }
          
          console.log(`調試: 提取結果 - 代碼: ${code}, 數量: ${qty}, 尺寸: ${size}, 購買類型: ${purchaseType}`);
          
          // 根據產品類型決定要求
          if (code.includes("WS-712")) {
            // WS-712系列需要尺寸+購買類型
            if (!size || !purchaseType) {
              console.log(`調試: 跳過WS-712產品 - 缺少尺寸或購買類型: ${code}`);
              continue;
            }
          } else {
            // 其他產品只需要尺寸
            if (!size) {
              console.log(`調試: 跳過產品 - 缺少尺寸: ${code}`);
              continue;
            }
          }
          
          // 創建唯一標識符 - 在size和purchaseType提取完成後
          const uniqueKey = `${code}-${size || "no-size"}-${purchaseType || "no-type"}`;
          
          // 檢查是否已經存在相同的產品組合
          if (productMap.has(uniqueKey)) {
            // 累加數量
            const existingProduct = productMap.get(uniqueKey)!;
            const oldQty = existingProduct.qty;
            existingProduct.qty += qty;
            
            if (code === 'WS-793BU') {
              console.log(`調試: WS-793BU累加 - 原數量: ${oldQty}, 新增: ${qty}, 總數: ${existingProduct.qty}`);
            }
          } else {
            // 新產品組合
            if (code === 'WS-793BU') {
              console.log(`調試: WS-793BU首次檢測 - 數量: ${qty}`);
            }
            productMap.set(uniqueKey, {
              name: "",
              code: code,
              qty: qty,
              purchaseType: purchaseType,
              size: size
            });
          }
        }
      }
    }
  } catch (error) {
    console.error("pdf-parse解析失敗:", error);
  }
  
  // 將 Map 轉換為數組並輸出最終結果
  const rows = Array.from(productMap.values());
  console.log(`調試: 最終產品列表 (${rows.length}個產品):`);
  rows.forEach(row => {
    console.log(`調試: 最終結果 - 代碼: ${row.code}, 總數量: ${row.qty}, 尺寸: ${row.size}, 購買類型: ${row.purchaseType}`);
  });
  
  return rows;
}